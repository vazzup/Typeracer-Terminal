#!/usr/bin/env python3

import curses, time, wikiquote, random

def get_quote():
	'''
	Function to get quote from wikiquote api
	uses the wikiquote module from pypi
	Get's a random title name,
	then detches quotes
	returns a random quote from the collection
	'''
	title_name = random.choice(wikiquote.random_titles())
	quotes_ = wikiquote.quotes(title_name)
	while len(quotes_) == 0:
		title_name = random.choice(wikiquote.random_titles())
		quotes_ = wikiquote.quotes(title_name)
	quote = random.choice(quotes_)
	return quote

def main():
	print('Fetching quote...')
	question = get_quote()
	stdscr = curses.initscr()
	curses.noecho()	#Do not print whatever is read
	curses.cbreak()	#If Ctrl + C is pressed, exit the program
	stdscr.keypad(True)
	curses.start_color() #Allow for color in text
	UNTOUCH, CORRECT, INCORRECT = 1, 2, 3 #Constants
	curses.init_pair(UNTOUCH, curses.COLOR_YELLOW, curses.COLOR_BLACK) #Color Pair for Untouched string
	curses.init_pair(CORRECT, curses.COLOR_GREEN, curses.COLOR_BLACK) #Color Pair for Correct string
	curses.init_pair(INCORRECT, curses.COLOR_RED, curses.COLOR_BLACK) #Color Pair for Incorrect string
	number_words  = len(list(question.split())) #Count number of words in quote
	correct_index, current_index =  -1, -1
	no_errors = True 
	#Turn certain attributes on
	stdscr.attron(curses.color_pair(UNTOUCH) | curses.A_STANDOUT)
	stdscr.addstr(question)
	stdscr.attroff(curses.color_pair(UNTOUCH))
	#Wait until first key is pressed
	#As soon as it is pressed, read it and buffer it back
	#Then start the timer
	curses.ungetch(stdscr.getch())
	start = time.time()
	while True:
		#Main logic loop 
		c = stdscr.getch()
		stdscr.move(0, 0)
		if c == curses.KEY_BACKSPACE:
			current_index = max(current_index - 1, -1)
			correct_index = min(current_index, correct_index)
		else:
			current_index += 1
			current_index = min(current_index, len(question) - 1)
			if question[current_index] == chr(c) and no_errors:
				correct_index += 1
			elif question[current_index] != chr(c):
				no_errors = False
		stdscr.attron(curses.color_pair(CORRECT) | curses.A_UNDERLINE)
		stdscr.addstr(question[ : correct_index + 1])
		stdscr.attroff(curses.color_pair(CORRECT))
		stdscr.attron(curses.color_pair(INCORRECT))
		stdscr.addstr(question[max(correct_index + 1, 0) : current_index + 1])
		stdscr.attroff(curses.color_pair(INCORRECT) | curses.A_UNDERLINE)
		stdscr.attron(curses.color_pair(UNTOUCH))
		stdscr.addstr(question[max(current_index + 1, 0) : ])
		stdscr.attroff(curses.color_pair(UNTOUCH))
		if correct_index == len(question) - 1:
			break
		if correct_index == current_index:
			no_errors = True

	#Self Explanatory
	end = time.time()
	stdscr.addstr("\nCongratulations! Execution Time is " + str(round((end - start), 3))\
		+ " and speed is " + str(round(number_words * 60/(end - start))) + " WPM...")
	stdscr.addstr("\nPress any key to continue...")
	stdscr.getch()
	curses.endwin()

if __name__ == '__main__':
	main()
